#!/bin/bash
#
# $Id: euca_conf,v 1.7 2008-12-24 18:28:07 nurmi Exp $

FILE="$EUCALYPTUS/etc/eucalyptus/eucalyptus.conf"
EUCALYPTUS=""
CC_PORT=""
NC_PORT=""
CLOUD_PORT=""
CLOUD_SSL_PORT=""
NAME=""
INSTANCE=""
EUCA_USER=""
HYPERVISOR=""
DHCPD=""
DHCP_USER=""
NEWNODES=""
NODEMODE=""
CLUSNAME=""
NEWCLUS=""
CLUSMODE=""
UPGRADE_CONF=""

usage () {
	echo "$0 [options] [<file>]"
	echo
	echo "Modify Eucalyptus configuration file. [<file>] is the"
	echo "configuration file to be modified: if it's now specified"
	echo "it will searched in $EUCALYPTUS/etc/eucalyptus"
	echo
	echo
	echo "   -help                       this message"
	echo "   -d <dir>                    point EUCALYPTUS to <dir>"
	echo "   -addnode <hostname>         add new node to EUCALYPTUS"
	echo "   -synckeys                   sync the keys with the nodes"
	echo "   -delnode <hostname>         remove node from EUCALYPTUS"
	echo "   -addcluster <clusname> <hostname> add new cluster to EUCALYPTUS"
#	echo "   -delcluster <clusname> <hostname> remove cluster from EUCALYPTUS"
	echo "   -nodes \"host host ...\"    list of NCs"
	echo "   -ccp <port>                 set CC port"
	echo "   -ncp <port>                 set NC port"
	echo "   -instances <path>           set the INSTANCE path"
	echo "   -cloudp <port1> <port2>     set the 2 cloud ports"
	echo "   -hypervisor <kvm|xen>       set hypervisor to use"
	echo "   -user <euca_user>           set the user to use"
	echo "   -dhcpd <dhcpd>              set the dhcpd binary to <name>"
	echo "   -dhcp_user <user>           set the username to run dhcpd as"
	echo "   -name <var>                 returns the value or <name>"
	echo "where <file> is the configuration file ($FILE by default)"
	echo
}

# 3 paramenter: the file, the variable name, the new value
change_var_value () {
	cp $1 /tmp/euca-tmp.$$
	sed "s<\(${2}\).*<\1=\"${3}\"<" /tmp/euca-tmp.$$ > $1
	rm -f /tmp/euca-tmp.$$
}
# comment lines matching $2 ($1 is the file)
comment () {
	cp $1 /tmp/euca-tmp.$$
	sed "s<^[[:blank:]]*\(${2}.*\)<#\1<" /tmp/euca-tmp.$$ > $1
	rm -f /tmp/euca-tmp.$$
}
# comment lines matching $2 ($1 is the file)
uncomment () {
	cp $1 /tmp/euca-tmp.$$
	sed "s<^[#[:blank:]]*\(${2}.*\)<\1<" /tmp/euca-tmp.$$ > $1
	rm -f /tmp/euca-tmp.$$
}

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

# let's parse the command line
while [ $# -gt 0 ]; do
	if [ "$1" = "-h" -o "$1" = "-help" -o "$1" = "?" -o "$1" = "--help" ]; then
		usage
		exit 1
	fi

	if [ "$1" = "-synckeys" -o "$1" = "-synckey" ]; then 
	    NODEMODE="SYNC"
	    shift
	    continue
	fi
	if [ $# -eq 1 ]; then
		# we dont have options with no argument, so it has to be
		# the file
		FILE="$1"
		break
	fi

	# all other parameters requires at least 1 argument
	if [ $# -lt 2 ]; then
		usage
		exit 1
	fi

	# old command line options not used anylonger
	if [ "$1" = "-cc" -o "$1" = "-nc" -o "$1" = "-cloud" ]; then
		echo "-cc, -nc and -cloud are not used anymore"
		shift; shift;
		continue
	fi

	# now let's parse the command line
	if [ "$1" = "-d" ]; then
		if [ ! -d "${2}" ]; then
			echo "Is $2 where Eucalyptus is installed?"
			exit 1
		fi
		EUCALYPTUS="${2}"
		shift; shift
		continue
	fi
	if [ "$1" = "-name" ]; then
		NAME="$NAME $2"
		shift; shift
		continue
	fi		
	if [ "$1" = "-upgrade-conf" ]; then
		# hidden options to upgrade from an older version
		UPGRADE_CONF="$2"
		if [ ! -e "$UPGRADE_CONF" ]; then
			echo "Cannot read $UPGRADE_CONF"
			exit 1
		fi
		shift; shift
		continue
	fi		
	if [ "$1" = "-dhcpd" ]; then
		DHCPD="$2"
		shift; shift
		continue
	fi		
	if [ "$1" = "-dhcp_user" ]; then
		DHCPC_USER="$2"
		shift; shift
		continue
	fi		
	if [ "$1" = "-nodes" ]; then
		NODES="${2}"
		shift; shift
		continue
	fi		
	if [ "$1" = "-ccp" ]; then
		CC_PORT="$2"
		shift; shift
		continue
	fi		
	if [ "$1" = "-ncp" ]; then
		NC_PORT="$2"
		shift; shift
		continue
	fi
	if [ "$1" = "-instances" ]; then
		INSTANCE="$2"
		shift; shift
		continue
	fi
	if [ "$1" = "-user" ]; then
		EUCA_USER="$2"
		shift; shift
		continue
	fi
	if [ "$1" = "-hypervisor" ]; then
		if [ "$2" != "xen" -a "$2" != "kvm" ]; then
			echo "Only kvm or xen are supported at the moment"
			exit 1
		fi
		HYPERVISOR="$2"
		shift; shift
		continue
	fi
	if [ "$1" = "-cloudp" ]; then
		if [ $# -lt 3 ]; then
			echo "We need 2 ports for cloud controller"
			exit 1
		fi
		CLOUD_PORT="$2"
		CLOUD_SSL_PORT="$3"
		shift; shift; shift
		continue
	fi
	if [ "$1" = "-addnode" ]; then 
	    NEWNODES="${2}"
	    NODEMODE="ADD"
	    shift; shift
	    continue
	fi
	if [ "$1" = "-delnode" ]; then 
	    NEWNODES="${2}"
	    NODEMODE="REM"
	    shift; shift
	    continue
	fi
	if [ "$1" = "-addcluster" ]; then
	    if [ $# -lt 3 ]; then
		echo "Requires the cluster nice name and CC hostname"
		exit 1
	    fi
	    CLUSNAME="$2"
	    NEWCLUS="$3"
	    CLUSMODE="ADD"
	    shift; shift; shift
	    continue
	fi
	usage 
	exit 1
done

# some basic check
if [ -z "${FILE}" -o ! -f "${FILE}" ]; then
	usage
	exit 
fi

# let's keep a copy of the original file before starting
cp $FILE $FILE.bak

# let's change the value
if [ -n "$EUCALYPTUS" ]; then
	change_var_value $FILE EUCALYPTUS "${EUCALYPTUS}"
fi
if [ -n "$CC_PORT" ]; then
	change_var_value $FILE CC_PORT "${CC_PORT}"
fi
if [ -n "$NC_PORT" ]; then
	change_var_value $FILE NC_PORT "${NC_PORT}"
fi
if [ -n "$CLOUD_PORT" ]; then
	change_var_value $FILE CLOUD_PORT "${CLOUD_PORT}"
fi
if [ -n "$CLOUD_SSL_PORT" ]; then
	change_var_value $FILE CLOUD_SSL_PORT "${CLOUD_SSL_PORT}"
fi
if [ -n "$INSTANCE" ]; then
	change_var_value $FILE INSTANCE_PATH "${INSTANCE}"
fi
if [ -n "$DHCPD" ]; then
	change_var_value $FILE VNET_DHCPDAEMON "${DHCPD}"
fi
if [ -n "$DHCPC_USER" ]; then
	change_var_value $FILE VNET_DHCPUSER "${DHCPC_USER}"
	uncomment $FILE VNET_DHCPUSER
fi
if [ -n "$NODES" ]; then
	change_var_value $FILE NODES "${NODES}"
fi
if [ -n "$HYPERVISOR" ]; then
	change_var_value $FILE HYPERVISOR "${HYPERVISOR}"
	uncomment $FILE HYPERVISOR
fi
if [ -n "$EUCA_USER" ]; then
	change_var_value $FILE EUCA_USER "${EUCA_USER}"
fi
for x in $NAME ; do
	VALUE=`cat $FILE |grep $x|cut -f 2 -d =|tr  '"' ' '`
	echo "$x=$VALUE"
done

# modify the current conf file based on an older configuration
if [ -n "$UPGRADE_CONF" ]; then
	VARS="EUCA_USER ENABLE_WS_SECURITY LOGLEVEL CLOUD_PORT CLOUD_SSL_PORT CC_PORT SCHEDPOLICY NODES NC_SERVICE NC_PORT MAX_MEM MAX_CORES INSTANCE_PATH VNET_INTERFACE VNET_BRIDGE VNET_DHCPDAEMON"
	VNET_VARS="VNET_MODE VNET_SUBNET VNET_NETMASK VNET_DNS VNET_ADDRSPERNET VNET_PUBLICIPS VNET_BROADCAST VNET_ROUTER VNET_MACMAP"
	
	# source the old config
	. $UPGRADE_CONF

	# let's start from no network
	for x in $VNET_VARS ; do
		comment $FILE $x
	done
		
	# modified the defined variables
	for x in $VARS ; do
		y="$(echo \$${x})"
		eval y="$y"
		if [ -z "$y" ]; then
			# we just leave NODES uncomment even if it's empty
			if [ "$x" != "NODES" ]; then
				comment $FILE $x
			fi
		else
			uncomment $FILE $x
			change_var_value $FILE $x "${y}"
		fi
	done
	# and add the network variables
	echo >> $FILE
	echo "# network configuration from the old configuration file" >> $FILE
	for x in $VNET_VARS ; do
		y="$(echo \$${x})"
		eval y="$y"
		if [ -n "$y" ]; then
			echo "$x=\"${y}\"" >> $FILE
		fi
	done
fi

# adding a new cluster
if [ -n "$NEWCLUS" ]; then
	. $FILE
    
    if [ -d "$EUCALYPTUS/var/lib/eucalyptus/db/" ]; then
	DBDIR="$EUCALYPTUS/var/lib/eucalyptus/db/"
    else
	echo "ERROR: cannot locate eucalyptus database, try logging in through the admin web interface"
	exit 1
    fi
    FIELD=`grep -i "CREATE .*TABLE USERS" ${DBDIR}/* | sed 's/,/\n/g' | awk '/[Uu][Ss][Ee][Rr]_[Ss][Ee][Cc][Rr][Ee][Tt][Kk][Ee][Yy]/ {print NR}'`
    if [ "$FIELD" = "" ]; then
	echo "ERROR: cannot locate entry in eucalyptus database, try logging in through the admin web interface"
	exit 1
    fi
    KEY=$(eval echo $(awk -v field=${FIELD} -F, '/INSERT INTO USERS.*admin/ {print $field}' ${DBDIR}/* | head -n 1))
    
    ARGS="AWSAccessKeyId=ISMvKXpXpadDiUoOSoAfww&Action=DescribeAvailabilityZones"
    ARGS="${ARGS}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=$(date '+%Y-%m-%dT%H%%3A%M%%3A%S.000Z')&Version=2008-12-01"
    SIGNATURE=$(echo -en "GET\n127.0.0.1\n/services/Eucalyptus\n${ARGS}" | openssl dgst -sha256 -hmac ${KEY} -binary | openssl base64)
    ISUP=`wget -O - "http://127.0.0.1:8773/services/Eucalyptus?${ARGS}&Signature=${SIGNATURE}" 2>/dev/null | grep UP`
    if [ -n "$ISUP" ]; then
	echo "ERROR: there is already a cluster registered with the system."
	exit 1
    fi

    ARGS="AWSAccessKeyId=ISMvKXpXpadDiUoOSoAfww&Action=AddCluster&Host=${NEWCLUS}&Name=${CLUSNAME}&Port=${CC_PORT}"
    ARGS="${ARGS}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=$(date '+%Y-%m-%dT%H%%3A%M%%3A%S.000Z')&Version=2008-12-01"
    SIGNATURE=$(echo -en "GET\n127.0.0.1\n/services/Eucalyptus\n${ARGS}" | openssl dgst -sha256 -hmac ${KEY} -binary | openssl base64)
    
    ISREG=`wget -O - "http://127.0.0.1:8773/services/Eucalyptus?${ARGS}&Signature=${SIGNATURE}" 2>/dev/null`
    if [ ! -n "$ISREG" ]; then
	echo "ERROR: failed to register new cluster, please log in to the admin interface and check cluster status."
	exit 1
    fi
    echo "New cluster '${CLUSNAME}' on host '${NEWCLUS}' successfully added."
fi

# operations on the nodes
if [ -n "$NODEMODE" ]; then
	. $FILE

	# for synckey we fake addnodes
	if [ "$NODEMODE" = "SYNC" ]; then
		if [ -z "$NODES" ]; then
			echo "Warning: there are no NODES configured"
		else
			NEWNODES="${NODES}"
			NODEMODE="ADD"
		fi
	fi

	# adding (or removing) nodes
	for NEWNODE in ${NEWNODES} ; do
		# remove is simpler: just remove the node name
		if [ "$NODEMODE" = "REM" ]; then
			if ! echo "$NODES"|grep "${NEWNODE}" > /dev/null ; then
				echo "Node ${NEWNODE} is not known"
				continue
			fi
			NODES="`echo $NODES|sed 's/${NEWNODE}//'|tr -s ' '`"
			change_var_value $FILE NODES "${NODES}"
			echo "SUCCESS: removed node '${NEWNODE}' from '$FILE'"
			continue
		fi
	
		# let's be sure the mode is now ADD
		if [ "$NODEMODE" != "ADD" ]; then
			echo "ERROR: unknown mode '$NODEMODE', don't know what to do"
			exit 1
		fi
		echo
 
		# we need the keys
		if [ -d "$EUCALYPTUS/var/lib/eucalyptus/keys/" ]; then
			KEYDIR="$EUCALYPTUS/var/lib/eucalyptus/keys/"
		else
			echo "ERROR: cannot find keys, did you configured eucalyptus?"
			exit 1
		fi

		# warn the user on what we are going to do
		echo "Using scp to sync keys with node \"${NEWNODE}\" (user \"$EUCA_USER\")"
		sudo -u $EUCA_USER scp ${KEYDIR}/*-cert.pem ${KEYDIR}/node-pk.pem ${EUCA_USER}@${NEWNODE}:${KEYDIR}
		if [ "$?" != "0" ]; then
			echo "ERROR: could not synchronize keys. Node ${NEWNODE} may not be available."
			continue
		fi
 
		# NODES list
		if ! echo "${NODES}"|grep "${NEWNODE}" > /dev/null ; then
			# node is not preset: we need to add it
			NODES="${NODES} $NEWNODE"
			change_var_value $FILE NODES "${NODES}"
		fi
	done
fi

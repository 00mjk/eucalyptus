#!/usr/bin/python -tt
# (c) Copyright 2016 Hewlett Packard Enterprise Development Company LP
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the following
# conditions are met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import argparse
import logging
import os
import os.path
import signal
import socket

from subprocess import check_call, Popen, PIPE
from ConfigParser import ConfigParser
from StringIO import StringIO
from xml.dom.minidom import parseString
from re import compile, match, I, S

import libvirt

_ETC_EUCALYPTUS = '/etc/eucalyptus'
_RUN_EUCALYPTUS = '/var/run/eucalyptus'
_LIB_EUCALYPTUS = '/var/lib/eucalyptus'
_EUCALYPTUS_CONF = 'eucalyptus.conf'
_GLOBAL_NETWORK_INFO_XML = 'global_network_info.xml'
_INSTANCE_XML = 'instance.xml'
_INSTANCE_LIBVIRT_XML = 'instance-libvirt.xml'
_WORK = 'work'
_INSTANCE_PATH = 'INSTANCE_PATH'
_EUCALYPTUS = 'EUCALYPTUS'
_GLOBAL_SECTION = 'GLOBAL'
_QEMU_CONN = 'qemu:///system'
_DEFAULT_TIMEOUT = 60
_INSTANCE_RAM = '-ram.save'
_BLOCK_SAVE = '-block.save'
_NODEADMIN_VOLUME = '/usr/libexec/eucalyptus/nodeadmin-manage-volume-connections'


class NodeAdminUnpackError(Exception):

    def __init__(self, *args):
        super(NodeAdminUnpackError, self).__init__(*args)
        logging.error(*args)


def _time_out(func, args=(), kwargs={}, timeout_duration=1, default=None):
    class TimeoutError(Exception):
        pass

    def handler(signum, frame):
        raise TimeoutError()

    # set the timeout handler
    old_handler = signal.signal(signal.SIGALRM, handler)
    signal.alarm(timeout_duration)
    try:
        result = func(*args, **kwargs)
    except TimeoutError as exc:
        logging.debug("timeout period expired %s", exc)
        result = default
    finally:
        signal.alarm(0)

        if old_handler and old_handler not in [signal.SIG_DFL, signal.SIG_IGN]:
            signal.signal(signal.SIGALRM, old_handler)

    return result


def _parse_args():
    parser = argparse.ArgumentParser(description="Restore an instance to libvirt after "
                                     "unpacking artifacts from packed file",
                                     epilog="The following environment variables must be established as well:\n"
                                     "EUCALYPTUS=/\n"
                                     "AXIS2C_HOME=/usr/lib64/axis2c\n"
                                     "LD_LIBRARY_PATH=$AXIS2C_HOME/lib:$AXIS2C_HOME/modules/rampart\n",
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("packed_file",
                        help="file path to the packed file storing the instance")
    parser.add_argument("--verbose",
                        help="increase output verbosity",
                        action="store_true")
    parser.add_argument("--sc-host-port",
                        help="the host and port of the storage controller",
                        required=True)

    args = parser.parse_args()

    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    return (args, loglevel)


def _parse_eucalyptus_conf():
    parser = ConfigParser()
    config = StringIO()

    config.write('[%s]\n' % _GLOBAL_SECTION)
    with open(os.path.join(_ETC_EUCALYPTUS, _EUCALYPTUS_CONF)) as config_file:
        config.write(config_file.read())
    config.seek(0, os.SEEK_SET)

    parser.readfp(config)

    return parser


def _get_conf_value(variable_name):
    euca_conf = _parse_eucalyptus_conf()

    try:
        return euca_conf.get(_GLOBAL_SECTION, variable_name).strip('"')
    except:
        return None


def _find_instance(packed_path):
    tar_cmd = ["/bin/tar", "-xzOf", packed_path,
               "--wildcards", "*/instance.xml"]

    proc = Popen(tar_cmd, stdout=PIPE)
    instance_xml = proc.stdout.read()
    logging.debug(instance_xml)
    parser = parseString(instance_xml)

    for instance_path in parser.getElementsByTagName('instancePath'):
        instance_name = os.path.split(instance_path.childNodes[0].data)[1]
        return (instance_name, instance_path.childNodes[0].data)


def _get_libvirt_connection():
    conn = libvirt.open(_QEMU_CONN)
    if not conn:
        raise NodeAdminUnpackError(
            "Failed to connect to libvirt (%s)", _QEMU_CONN)

    return conn


def _lookup_domain(conn, instance_name):
    domain = conn.lookupByName(instance_name)
    if not domain:
        conn.close()
        raise NodeAdminUnpackError("Failed to find %s in libvirt list of domains",
                                   instance_name)

    return domain


def _restore_instance(instance, instance_path, *args, **kwargs):
    conn = _get_libvirt_connection()
    rc = None

    if os.path.exists(
       os.path.join(instance_path, "%s%s" % (instance, _INSTANCE_RAM))):
        rc = conn.restore(
            os.path.join(instance_path, "%s%s" % (instance, _INSTANCE_RAM)))
    else:
        logging.debug(
            "saved ram file not found, attempting instance creation.")
        with open(os.path.join(instance_path, _INSTANCE_LIBVIRT_XML)) as libvirt_xml:
            instance_xml = libvirt_xml.read()
            conn.createXML(instance_xml, 0)

    if rc:
        raise NodeAdminUnpackError(
            "Failed to restore instance %s at %s (%d)", instance, instance_path, rc)


def _extract_files(packed_path):
    tar_cmd = ["/bin/tar", "-xpf", packed_path, "-C", "/", "--incremental"]

    rc = check_call(tar_cmd)
    if rc:
        raise NodeAdminUnpackError(
            "Failed extracting files from %s (%d)", packed_path, rc)


def _get_eucalyptus_home_path():
    return _get_conf_value(_EUCALYPTUS)


def _connect_volumes(instance_id, sc_host_port):
    scclient_args = [
        "ConnectVolumes", "-s", sc_host_port, "-i", instance_id]
    scclient_cmd = [_NODEADMIN_VOLUME] + scclient_args

    rc = check_call(scclient_cmd)
    if rc:
        raise NodeAdminUnpackError(
            "Failed to export volume with args %s (%d)", ",".join(scclient_args))


def _change_ownership(instance_path):
    xml_stat = os.stat(os.path.join(instance_path, _INSTANCE_XML))

    for file in os.listdir(instance_path):
        os.lchown(
            os.path.join(instance_path, file), xml_stat.st_uid, xml_stat.st_gid)

    while(os.path.basename(instance_path).lower() != "eucalyptus"):
        os.lchown(instance_path, xml_stat.st_uid, xml_stat.st_gid)
        instance_path = os.path.dirname(instance_path)


def unpack_instance(instance_path, packed_path, sc_host_port):
    _extract_files(packed_path)

    instance_name = os.path.basename(instance_path)

    if not os.path.exists(os.path.join(instance_path, _INSTANCE_LIBVIRT_XML)):
        raise NodeAdminUnpackError("Failed to extract libvirt instance xml file %s",
                                   os.path.join(instance_path, _INSTANCE_LIBVIRT_XML))

    if not os.path.exists(os.path.join(instance_path, "%s%s" % (instance_name, _INSTANCE_RAM))):
        raise NodeAdminUnpackError("Failed to extract ram save file %s",
                                   os.path.join(instance_path, "%s%s" % (instance_name, _INSTANCE_RAM)))

    _change_ownership(instance_path)

    _connect_volumes(instance_name, sc_host_port)

    _restore_instance(instance_name, instance_path)
    logging.info("instance %s unpacked", instance_name)

    return 0


def _is_nc_service_running():
    service_cmd = ["/sbin/service", "eucalyptus-nc", "status"]

    proc = Popen(service_cmd, stdout=PIPE)
    nc_status = proc.stdout.read()
    logging.debug("nc_status is %s", nc_status)

    results = match(compile(".*running.*", I | S), nc_status)

    return results is not None


def _check_for_axisc_environment():
    env_eucalyptus = len(os.getenv("EUCALYPTUS") or "") > 0
    env_axis2c_home = len(os.getenv("AXIS2C_HOME") or "") > 0
    env_ld_library_path = len(os.getenv("LD_LIBRARY_PATH") or "") > 0
    return (env_eucalyptus and env_axis2c_home and env_ld_library_path)


def _test_sc_connection(sc_host_port):
    s = socket.socket()
    if sc_host_port.find(":") != -1:
        try:
            address = sc_host_port.split(":")[0]
            port = int(sc_host_port.split(":")[1].strip())
            s.connect((address, port))
        except Exception as e:
            raise NodeAdminUnpackError(
                "something's wrong with %s:%d. Exception is %s" % (address, port, e))
        finally:
            s.close()
        return

    raise NodeAdminUnpackError(
        "Please check %s for the correct host and port of the storage controller.\n", sc_host_port)


def main(args, log_level):
    logging.basicConfig(format="%(levelname)s: %(message)s", level=log_level)
    logging.debug("Your Arguments: %s", args)

    if _is_nc_service_running():
        logging.error(
            "Node controller service is running. Please stop this service before continuing.")
        return 1

    if not _check_for_axisc_environment():
        logging.error(
            "Missing environment variables $EUCALYPTUS, $AXIS2C_HOME and LD_LIBRARY_PATH")
        return 1

    _test_sc_connection(args.sc_host_port)

    logging.info("unpack on %s", args.packed_file)

    if not os.path.exists(args.packed_file):
        raise NodeAdminUnpackError("%s not found", args.packed_file)

    instance_tuple = _find_instance(args.packed_file)

    if instance_tuple:
        rc = unpack_instance(
            instance_tuple[1], args.packed_file, args.sc_host_port)

        if rc:
            raise NodeAdminUnpackError("unpack instance returned %d", rc)

    return 0


if __name__ == '__main__':
    args, log_level = _parse_args()
    sys.exit(main(args, log_level))

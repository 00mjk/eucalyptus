#!/usr/bin/perl 

delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
$ENV{'PATH'}='/bin:/usr/bin:/sbin:/usr/sbin/';

$table = shift @ARGV;
if ($table =~ /^([ &:#-\@\w.]+)$/) {
    $table = $1; #data is now untainted
} else {
    exit(1);
}

$rulefile = shift @ARGV;
if ($rulefile =~ /^([ &:#-\@\w.]+)$/) {
    $rulefile = $1; #data is now untainted
} else {
    exit(1);
}

if (!$table || !$rulefile || !($table eq "filter" || $table eq "nat") || $rulefile eq "" || !-f $rulefile) {exit 1;}

@workingfiles = ("$rulefile.orig", "$rulefile.new");

open my $fh, '-|' or exec 'iptables-save', ("-t", "$table") or dodie ("iptables-save failed: $!\n");
open(OFH, ">$rulefile.orig") or dodie ("cannot open $rulefile.orig");
$outbuf = "";
while(<$fh>) {
    chomp;
    my $line = $_;
    $line =~ s/\s+$//g;
    $line =~ s/^\s+//g;
    print OFH "$line\n";
}
close($fh) || dodie ("iptables-save failed\n");
close(OFH);

$added=0;
$outbuf = "";
open(FH, "$rulefile.orig");
while(<FH>) {
    chomp;
    my $line = $_;
    $line =~ s/\s+$//g;
    $line =~ s/^\s+//g;
    if ($line eq "COMMIT") {
	# time to load the input rules
	open (RFH, "$rulefile");
	while(<RFH>) {
	    chomp;
	    my $line = $_;
	    $line =~ s/\s+$//g;
	    $line =~ s/^\s+//g;
	    if ($line ne "" && !$rulehash{$line}) {
		$buf .= "$line\n";
		$rulehash{$line} = 1;
		$added=1;
	    }
	}
	close(RFH);	
    }
    if ($line ne "" && !$rulehash{$line}) {
	$buf .= "$line\n";
	$rulehash{$line} = 1;
    }
}
close(FH);

if (!$added) {
    doexit(0);
}

open (OFH, ">$rulefile.new");
print OFH "$buf\n";
close(OFH);
if (!-f "$rulefile.new") {
    dodie("cannot find $rulefile.new");
}


open my $fh, '|-' or exec 'iptables-restore' or dodie( "iptables-restore failed: $!\n");
open(IFH, "$rulefile.new") or dodie( "cannot open $rulefile.new");
while(<IFH>) {
    print $fh "$_";
}
close($fh) || dodie( "iptables-restore failed\n");
close(IFH);

doexit(0);

sub doexit {
    $ret = shift @_;
    $msg = shift @_;
    if ($msg) {
	print STDERR "$msg\n";
    }

    for ($i=0; $i<@workingfiles; $i++) {
	if ( -f "$workingfiles[$i]" ) {
	    unlink("$workingfiles[$i]");
	}
    }

    exit($ret);
}    

sub dodie {
    $msg = shift @_;
    doexit(1, "$msg");
}

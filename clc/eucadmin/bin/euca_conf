#!/usr/bin/env python
# Copyright (c) 2011, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Mitch Garnaat mgarnaat@eucalyptus.com

import optparse
import inspect
import boto.utils

class EucaConf(object):

    def __init__(self):
        self.debug = 0
        self.parser = optparse.OptionParser()
        self.parser.add_option('-d', action='store', type='string',
                               metavar='<dir>',
                               dest='euca_dir',
                               help='point EUCALYPTUS to <dir>')
        self.parser.add_option('--no-rsync', action='store_true',
                               dest='no_rsync', help="don't use rsync",
                               default=False)
        self.parser.add_option('--no-scp', action='store_true',
                               dest='no_scp', help="don't use scp",
                               default=False)
        self.parser.add_option('--skip-scp-hostcheck', action='store_true',
                               dest='skip_scp_hostcheck',
                               help='skip scp interactive host keycheck',
                               default=False)
        self.parser.add_option('--get-credentials', action='store',
                               type='string', dest='get_credentials',
                               metavar='<zipfile>',
                               help='download credentials to <zipfile>')
        self.parser.add_option('--register-nodes', action='append',
                               type='string', dest='nodes',
                               metavar='"host host..."',
                               help='add new nodes to EUCALYPTUS')
        self.parser.add_option('--deregister-nodes', action='append',
                               type='string', dest='nodes',
                               metavar='"host host..."',
                               help='remove nodes from EUCALYPTUS')
        self.parser.add_option('--register-cluster', action='store',
                               type='string', dest='reg_clusters', nargs=3,
                               metavar='<partition> <clustername> <host>',
                               help='add new cluster to EUCALYPTUS')
        self.parser.add_option('--deregister-cluster', nargs=2,
                               type='string', dest='dereg_clusters',
                               metavar='<partition> <clustername>',
                               help='remove cluster from EUCALYPTUS')
        self.parser.add_option('--register-walrus', nargs=3,
                               type='string', dest='reg_walruses',
                               metavar='<partition> <clustername> <host>',
                               help='add new walrus to EUCALYPTUS')
        self.parser.add_option('--deregister-walrus', nargs=2,
                               type='string', dest='dereg_walruses',
                               metavar='<partition> <host>',
                               help='remove walrus from EUCALYPTUS')
        self.parser.add_option('--register-sc', nargs=3,
                               type='string', dest='reg_scs',
                               metavar='<partition> <clustername> <host>',
                               help='add new storage controller to EUCALYPTUS')
        self.parser.add_option('--deregister-sc', nargs=2,
                               type='string', dest='dereg_scs',
                               metavar='<partition> <host>',
                               help='remove storage controller from EUCALYPTUS')
        self.parser.add_option('--list-walruses', action='store_true',
                               dest='list_walruses', default=False,
                               help='list registered walrus(es)')
        self.parser.add_option('--list-clusters', action='store_true',
                               dest='list_clusters', default=False,
                               help='list registered CCs')
        self.parser.add_option('--list-nodes', action='store_true',
                              dest='list_nodes', default=False,
                              help='list registered NCs')
        self.parser.add_option('--list-scs', action='store_true',
                               dest='list_scs', default=False,
                               help='list registered SCs')
        self.parser.add_option('--no-sync', action='store_true',
                               dest='no_sync', default=False,
                               help='used only with --register-* to skip syncing keys')
        self.parser.add_option('--cc-port', action='store',
                               type='int', dest='cc_port',
                               metavar='<port>',
                               help='set CC port', default=8773)
        self.parser.add_option('--sc-port', action='store',
                               type='int', dest='sc_port',
                               metavar='<port>',
                               help='set CC port', default=8773)
        self.parser.add_option('--walrus-port', action='store',
                               type='int', dest='walrus_port',
                               metavar='<port>',
                               help='set Walrus port', default=8774)
        self.parser.add_option('--nc-port', action='store',
                               type='int', dest='nc_port',
                               metavar='<port>',
                               help='set NC port', default=8443)
        self.parser.add_option('--instances', action='store',
                               type='string', dest='instance_path',
                               metavar='<path>',
                               help='set the INSTANCE path')
        self.parser.add_option('--hypervisor', action='store',
                               type='string', dest='hypervisor',
                               metavar='<kvm|xen>',
                               help='set hypervisor to use')
        self.parser.add_option('--user', action='store',
                               type='string', dest='euca_user',
                               metavar='<euca_user>',
                               help='set the user to use')
        self.parser.add_option('--dhcpd', action='store',
                               type='string', dest='dhcpd_prog',
                               metavar='<dhcpd>',
                               help='set the dhcpd binary to <name>')
        self.parser.add_option('--dhcp_user', action='store',
                               type='string', dest='dhcp_user',
                               metavar='<user>',
                               help='set the username to run dhcpd as')
        self.parser.add_option('--name', action='store',
                               type='string', dest='var_name',
                               help='returns tthe value or <name>')
        self.parser.add_option('--import-conf', action='store',
                               type='string', dest='import_conf_file',
                               help='import variables from another eucalyptus.conf')
        self.parser.add_option('--setup', action='store_true',
                               dest='do_setup', default=False,
                               help='perform initial setup')
        self.parser.add_option('--enable {nc|cc|cloud|sc|walrus}',
                               action='store', type='choice',
                               choices=['nc', 'cc', 'cloud', 'sc', 'walrus'],
                               dest='enable_what', metavar='<service>',
                               help='enable service at next start}')
        self.parser.add_option('--disable {nc|cc|cloud|sc|walrus',
                               action='store', type='choice',
                               choices=['nc', 'cc', 'cloud', 'sc', 'walrus'],
                               dest='disable_what}', metavar='<service>',
                               help='disable service at next start')
        self.parser.add_option('--check {nc|cc|cloud|sc|walrus}',
                               action='store', type='choice',
                               choices=['nc', 'cc', 'cloud', 'sc', 'walrus'],
                               dest='check_what', metavar='<service>',
                               help='pre-flight checks')
        self.parser.add_option('--debug', action='store_true',
                               default=False, help='Enable debug output')
        self.options, self.args = self.parser.parse_args()

    def main(self):
        if self.options.debug:
            self.debug = 2
        for name, method in inspect.getmembers(self):
            if name.startswith('do_') and inspect.ismethod(method):
                method()
                

    def _do_list(self, option_name, module_name, class_name):
        if getattr(self.options, option_name):
            cls = boto.utils.find_class(module_name, class_name)
            req = cls(debug=self.debug)
            data = req.main()
            req.cli_formatter(data)

    def do_list_nodes(self):
        self._do_list('list_nodes',
                      'eucadmin.describenodes',
                      'DescribeNodes')

    def do_list_walruses(self):
        self._do_list('list_walruses',
                      'eucadmin.describewalruses',
                      'DescribeWalruses')

    def do_list_clusters(self):
        self._do_list('list_clusters',
                      'eucadmin.describeclusters',
                      'DescribeClusters')

    def do_list_sc(self):
        self._do_list('list_scs',
                      'eucadmin.describestoragecontrollers',
                      'DescribeStorageControllers')

    def _do_register(self, option_name, module_name, class_name, port_option):
        args = getattr(self.options, option_name)
        if args:
            partition = args[0]
            cluster_name = args[1]
            host = args[2]
            port = getattr(self.options, port_option)
            cls = boto.utils.find_class(module_name, class_name)
            req = cls(debug=self.debug)
            data = req.main(partition=partition, name=name,
                            port=port, host=host)
            req.cli_formatter(data)
            
    def do_register_cluster(self):
        self._do_register('reg_clusters',
                          'eucadmin.registercluster',
                          'RegisterCluster',
                          'cc_port')
            
    def do_register_walrus(self):
        self._do_register('reg_walruses',
                          'eucadmin.registerwalrus',
                          'RegisterWalrus',
                          'walrus_port')
            
    def do_register_cluster(self):
        self._do_register('reg_scs',
                          'eucadmin.registerstoragecontroller',
                          'RegisterStorageController',
                          'sc_port')
            
    def _do_deregister(self, option_name, module_name, class_name):
        args = getattr(self.options, option_name)
        if args:
            partition = args[0]
            cluster_name = args[1]
            cls = boto.utils.find_class(module_name, class_name)
            req = cls(debug=self.debug)
            data = req.main(partition=partition, name=cluster_name)
            req.cli_formatter(data)
            
    def do_deregister_cluster(self):
        self._do_deregister('dereg_clusters',
                            'eucadmin.deregistercluster',
                            'DeregisterCluster')

    def do_deregister_walrus(self):
        self._do_deregister('dereg_walruses',
                            'eucadmin.deregisterwalrus',
                            'DeregisterWalrus')

if __name__ == "__main__":
    ec = EucaConf()
    ec.main()
